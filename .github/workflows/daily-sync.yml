name: Daily Sync and Keep Alive

on:
  schedule:
    # 毎日日本時間9時に実行
    - cron: '0 0 * * *'  # UTC 0:00 = JST 9:00
    # 6時間ごとにKeep Alive
    - cron: '0 */6 * * *'
  workflow_dispatch:  # 手動実行も可能

jobs:
  sync-orders:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Keep Supabase Alive
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      run: python keep_alive.py
    
    - name: Sync Orders
      if: github.event.schedule == '0 0 * * *'
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        RAKUTEN_SERVICE_SECRET: ${{ secrets.RAKUTEN_SERVICE_SECRET }}
        RAKUTEN_LICENSE_KEY: ${{ secrets.RAKUTEN_LICENSE_KEY }}
        PRODUCT_MASTER_SPREADSHEET_ID: ${{ secrets.PRODUCT_MASTER_SPREADSHEET_ID }}
        GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
      run: |
        python -c "
        from datetime import datetime, timedelta, timezone
        from api.rakuten_api import RakutenAPI
        from core.database import Database
        
        def sync_orders():
            try:
                # 昨日の注文データを取得
                end_date = datetime.now(timezone.utc)
                start_date = end_date - timedelta(days=1)
                
                api = RakutenAPI()
                print(f'楽天注文同期開始: {start_date.date()} - {end_date.date()}')
                
                # 注文データ取得
                orders = api.get_orders(start_date, end_date)
                print(f'取得注文数: {len(orders)}件')
                
                if orders:
                    # データベースに保存
                    db = Database()
                    saved_count = 0
                    for order in orders:
                        try:
                            api.save_to_supabase(order)
                            saved_count += 1
                        except Exception as e:
                            print(f'注文保存エラー: {e}')
                    
                    print(f'同期完了: {saved_count}/{len(orders)}件保存')
                else:
                    print('新規注文データなし')
                    
            except Exception as e:
                print(f'同期エラー: {e}')
                import traceback
                traceback.print_exc()
                raise
        
        sync_orders()
        "