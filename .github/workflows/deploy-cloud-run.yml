name: Deploy to Cloud Run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: sizuka-inventory-system
  SERVICE_NAME: sizuka-inventory-system
  REGION: asia-northeast1

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Check environment and files
      run: |
        echo "Current directory:"
        pwd
        echo "Files in directory:"
        ls -la
        echo "Checking Dockerfile.cloudrun:"
        if [ -f Dockerfile.cloudrun ]; then
          echo "Dockerfile.cloudrun exists"
          head -10 Dockerfile.cloudrun
        else
          echo "ERROR: Dockerfile.cloudrun not found!"
          exit 1
        fi
        echo "Checking secrets availability:"
        if [ -z "${{ secrets.SUPABASE_URL }}" ]; then echo "WARNING: SUPABASE_URL is empty"; fi
        if [ -z "${{ secrets.SUPABASE_KEY }}" ]; then echo "WARNING: SUPABASE_KEY is empty"; fi
        if [ -z "${{ secrets.RAKUTEN_SERVICE_SECRET }}" ]; then echo "WARNING: RAKUTEN_SERVICE_SECRET is empty"; fi
        if [ -z "${{ secrets.RAKUTEN_LICENSE_KEY }}" ]; then echo "WARNING: RAKUTEN_LICENSE_KEY is empty"; fi

    - name: Build Docker image
      run: |
        docker build -f Dockerfile.cloudrun -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .

    - name: Push Docker image to GCR
      run: |
        docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}

    - name: Deploy to Cloud Run
      run: |
        echo "Deploying to Cloud Run..."
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars "SUPABASE_URL=https://equrcpeifogdrxoldkpe.supabase.co,SUPABASE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVxdXJjcGVpZm9nZHJ4b2xka3BlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzkxNjE2NTMsImV4cCI6MjA1NDczNzY1M30.ywOqf2BSf2PcIni5_tjJdj4p8E51jxBSrfD8BE8PAhQ,RAKUTEN_SERVICE_SECRET=${{ secrets.RAKUTEN_SERVICE_SECRET }},RAKUTEN_LICENSE_KEY=${{ secrets.RAKUTEN_LICENSE_KEY }},COLORME_CLIENT_ID=${{ secrets.COLORME_CLIENT_ID }},COLORME_CLIENT_SECRET=${{ secrets.COLORME_CLIENT_SECRET }},COLORME_REDIRECT_URI=${{ secrets.COLORME_REDIRECT_URI }},COLORME_ACCESS_TOKEN=${{ secrets.COLORME_ACCESS_TOKEN }}" \
          --memory 1Gi \
          --cpu 1 \
          --timeout 300s \
          --max-instances 10 || (echo "Deploy failed with exit code $?"; exit 1)

    - name: Get Service URL
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format "value(status.url)")
        echo "Service deployed at: $SERVICE_URL"
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT

    - name: Health Check
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format "value(status.url)")
        echo "Performing health check..."
        curl -f "$SERVICE_URL/health" || echo "Health check failed, but deployment succeeded"